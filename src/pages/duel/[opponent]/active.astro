---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { rdb } from "../../../firebase/client";
import { ref, get } from "firebase/database";

// URLパラメータ取得
const { opponent } = Astro.params;
const url = Astro.request.url;
const searchParams = new URL(url).searchParams;
const myId = searchParams.get("user") || "testUser1";
const opponentId = myId === "testUser1" ? "testUser2" : "testUser1";
const safeOpponent = opponent!.replace(/\./g, "_");

// RealtimeDBから取得
let myTodos = [];
let oppTodos = [];
try {
    const mySnap = await get(ref(rdb, `duels/${safeOpponent}/${myId}`));
    const oppSnap = await get(ref(rdb, `duels/${safeOpponent}/${opponentId}`));
    myTodos = mySnap.exists() ? mySnap.val() : [];
    oppTodos = oppSnap.exists() ? oppSnap.val() : [];
} catch {
    myTodos = [];
    oppTodos = [];
}

// 合体リスト
const allTodos = [
    ...myTodos.map((label: string) => ({ label, owner: "自分" })),
    ...oppTodos.map((label: string) => ({ label, owner: "相手" })),
];

// allTodosをwindow経由でJSに渡す用
const allTodosJSON = JSON.stringify(allTodos);
---

<style lang="scss">
    .todo_list {
        list-style: none;
        margin: 1rem 0;
        padding: 0;
        display: none;
    }
    .todo_list.active {
        display: block;
    }
    .todo_list li {
        display: flex;
        align-items: center;
        padding-left: 20px;
        color: #fff;
        font-size: 1.2rem;
        line-height: 2.5;

        input {
            position: relative;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50px;
            background: #3a4750;

            &:checked::after {
                content: "";
                position: absolute;
                top: -1px;
                left: 4px;
                width: 20px;
                height: 10px;
                border-bottom: 3px solid #48b02c;
                border-left: 3px solid #48b02c;
                transform: rotate(-45deg);
            }
        }
        label {
            padding-left: 20px;
            cursor: pointer;
        }
    }
    button {
        display: block;
        margin: 2.5rem auto 0;
        background: #ba2b1d;
        color: #fff;
        border: none;
        border-radius: 12px;
        font-size: 1.4rem;
        padding: 0.7rem 2.2rem;
        font-weight: bold;
    }
</style>

<BaseLayout>
    <h1>バトル中</h1>
    <ul class="todo_list active">
        {
            allTodos.map((item, i) => (
                <li>
                    <input
                        type="checkbox"
                        id={`battle-todo-${i}`}
                        data-id={item.label}
                    />
                    <label for={`battle-todo-${i}`}>
                        {item.label}{" "}
                        <span style="font-size: 0.9em; color: #ccc;">
                            ({item.owner})
                        </span>
                    </label>
                </li>
            ))
        }
    </ul>
    <button id="finishBtn" class="finish-btn">終わった</button>
    <script is:inline>
        // Astro→JS: allTodos配列をwindowに展開
        window.allTodos = JSON.parse("{allTodosJSON}");
    </script>
</BaseLayout>

<script>
    // 「終わった」ボタンでチェック状態つきで保存→遷移
    document
        .getElementById("finishBtn")
        ?.addEventListener("click", async () => {
            const params = new URLSearchParams(window.location.search);
            const myId = params.get("user") || "testUser1";
            const match = window.location.pathname.match(/duel\/([^/]+)/);
            const opponent = match ? match[1] : "H.miyoshi";

            // 1. チェックボックスの状態を取得
            const checkboxes = document.querySelectorAll(
                'input[type="checkbox"]',
            );
            const checkedArr = Array.from(checkboxes).map(
                (box) => (box as HTMLInputElement).checked,
            );

            // 2. allTodosにcheckedつきで新配列
            // クライアントJS内
            const allTodos = (window as any).allTodos || [];
            const todosToSave = allTodos.map((todo: any, i: number) => ({
                ...todo,
                checked: checkedArr[i], // ここで完了状態をセット
            }));

            // 3. 自分が選んだToDoだけフィルタして保存
            const myCheckedTodos = todosToSave.filter(
                (t: { owner: string }) => t.owner === "自分",
            );

            // 4. DBに保存（APIルートを作ってたらfetchで送信、直接setするならそのままset）
            // 例: API経由
            await fetch("/api/save-todos", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ opponent, myId, todos: myCheckedTodos }),
            });

            // 5. ページ遷移
            window.location.href = `/duel/${opponent}/result?user=${myId}`;
        });
</script>
