---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { rdb } from "../../../firebase/client";
import { ref, get } from "firebase/database";

// --- 必須: 動的ルート用 getStaticPaths ---
export function getStaticPaths() {
    return [
        { params: { opponent: "H.miyoshi" } },
        { params: { opponent: "K.yamagata" } },
        { params: { opponent: "R.tomozuka" } },
        { params: { opponent: "R.matuoka" } },
    ];
}

// --- パス・クエリ取得 ---
const { opponent } = Astro.params;
const url = Astro.request.url; // Astro 3系以降
const searchParams = new URL(url).searchParams;
const myId = searchParams.get("user") || "testUser1";
const opponentId = myId === "testUser1" ? "testUser2" : "testUser1";

const safeOpponent = opponent.replace(/\./g, "_");

// --- DBから両者の配列取得 ---
let userTodos: string[] = [];
let opponentTodos: string[] = [];
try {
    // ここで safeOpponent を使う！
    const mySnap = await get(ref(rdb, `duels/${safeOpponent}/${myId}`));
    const oppSnap = await get(ref(rdb, `duels/${safeOpponent}/${opponentId}`));
    userTodos = mySnap.exists() ? mySnap.val() : [];
    opponentTodos = oppSnap.exists() ? oppSnap.val() : [];
} catch {
    userTodos = [];
    opponentTodos = [];
}
---

<style>
    .battle-btn {
        margin-top: 2rem;
        width: 90%;
        max-width: 300px;
        font-size: 1.5rem;
        padding: 1rem 0;
        background: #ba2b1d;
        border-radius: 12px;
        color: #fff;
        border: none;
        font-weight: bold;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    h2 {
        color: #fff;
        margin: 1.2rem 0 0.2rem;
        font-size: 1.3rem;
    }
    ul {
        color: #fff;
        margin-bottom: 1.2rem;
    }
</style>

<BaseLayout>
    <h1>バトル内容発表</h1>
    <h2>あなたのToDo</h2>
    <ul>
        {
            userTodos.length > 0 ? (
                userTodos.map((todo) => <li>{todo}</li>)
            ) : (
                <li>（未選択）</li>
            )
        }
    </ul>
    <h2>相手のToDo</h2>
    <ul>
        {
            opponentTodos.length > 0 ? (
                opponentTodos.map((todo) => <li>{todo}</li>)
            ) : (
                <li>（未選択）</li>
            )
        }
    </ul>
    <button class="battle-btn" id="battleStartBtn">バトル開始</button>
</BaseLayout>

<script>
    // ボタンクリックでページ遷移
    document.addEventListener("DOMContentLoaded", () => {
        const btn = document.getElementById("battleStartBtn");
        if (btn) {
            btn.addEventListener("click", () => {
                const params = new URLSearchParams(window.location.search);
                const myId = params.get("user") || "testUser1";
                const match = window.location.pathname.match(/duel\/([^/]+)/);
                const opponent = match ? match[1] : "H.miyoshi";
                window.location.href = `/duel/${encodeURIComponent(opponent)}/duel?user=${myId}`;
            });
        }
    });
</script>
