---
// @ts-nocheck
import BaseLayout from "../../layouts/BaseLayout.astro";
import { db } from "../../firebase/client.js";
import { doc, getDoc } from "firebase/firestore";
import "../../styles/main.scss";

export function getStaticPaths() {
    return [{ params: { room: "room123" } }, { params: { room: "testroom" } }];
}
const { room } = Astro.params;

const exerciseSnap = await getDoc(doc(db, "todoCategories", "exercise"));
const exerciseItems = exerciseSnap.exists() ? exerciseSnap.data().items : [];

const cleaningSnap = await getDoc(doc(db, "todoCategories", "cleaning"));
const cleaningItems = cleaningSnap.exists() ? cleaningSnap.data().items : [];

const readSnap = await getDoc(doc(db, "todoCategories", "read"));
const readItems = readSnap.exists() ? readSnap.data().items : [];

const cookSnap = await getDoc(doc(db, "todoCategories", "cook"));
const cookItems = cookSnap.exists() ? cookSnap.data().items : [];

const stretchSnap = await getDoc(doc(db, "todoCategories", "stretch"));
const stretchItems = stretchSnap.exists() ? stretchSnap.data().items : [];
---

<style lang="scss">
    @use "@styles/_mixin.scss" as mixin;

    p {
        color: #fff;
        font-size: 1.4rem;
        margin-top: 40px;
    }

    .choose_nav {
        @include mixin.categry-btn-wrap;
        button {
            @include mixin.categry-btn-a;
        }
        button.active {
            background: #f39c12;
        }
    }

    .todo_list {
        list-style: none;
        margin: 1rem 0;
        padding: 0;
        display: none;
        &[data-cat].active {
            display: block;
        }
    }

    .todo_list li {
        display: flex;
        align-items: center;
        padding-left: 20px;
        color: #fff;
        font-size: 1.2rem;
        line-height: 2.5;

        input {
            position: relative;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50px;
            background: #3a4750;

            &:checked::after {
                content: "";
                position: absolute;
                top: -1px;
                left: 4px;
                width: 20px;
                height: 10px;
                border-bottom: 3px solid #48b02c;
                border-left: 3px solid #48b02c;
                transform: rotate(-45deg);
            }
        }
        label {
            padding-left: 20px;
            cursor: pointer;
        }
    }

    .modal_overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(#000, 0.6);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 999;

        &.visible {
            display: flex;
        }

        .modal_content {
            background: #3a4750;
            padding: 20px 25px;
            border-radius: 10px;
            text-align: center;
            color: #fff;

            p {
                margin-bottom: 24px;
                font-size: 1.4rem;
            }
            button {
                padding: 10px 20px;
                font-size: 1.2rem;
                background: #ba2b1d;
                border-radius: 5px;
                color: #fff;
                border: none;
                cursor: pointer;
            }
        }
    }
</style>

<BaseLayout>
    <h1>ルーム: {room}</h1>
    <p>あなたのターン</p>

    <nav class="choose_nav">
        <button data-cat="exercise" class="active">運動</button>
        <button data-cat="cleaning">掃除</button>
        <button data-cat="read">読書</button>
        <button data-cat="cook">料理</button>
        <button data-cat="stretch">ストレッチ</button>
    </nav>

    <ul class="todo_list active" data-cat="exercise">
        {
            exerciseItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-ex-${item.id}`} />
                    <label for={`todo-ex-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>
    <ul class="todo_list" data-cat="cleaning">
        {
            cleaningItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-cl-${item.id}`} />
                    <label for={`todo-cl-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>
    <ul class="todo_list" data-cat="read">
        {
            readItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-re-${item.id}`} />
                    <label for={`todo-re-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>
    <ul class="todo_list" data-cat="cook">
        {
            cookItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-co-${item.id}`} />
                    <label for={`todo-co-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>
    <ul class="todo_list" data-cat="stretch">
        {
            stretchItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-st-${item.id}`} />
                    <label for={`todo-st-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>

    <div id="battleModal" class="modal_overlay">
        <div class="modal_content">
            <p>バトルに進みますか？</p>
            <button id="modalProceed">進む</button>
        </div>
    </div>
</BaseLayout>

<script type="module">
    const roomParam = "{room}";

    const meId = new URL(location.href).searchParams.get("me") ?? "guest";
    import { rdb } from "../../firebase/client.js";
    import { ref, set, onValue } from "firebase/database";

    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-app.js";

    const app = initializeApp(firebaseConfig);
    // const rdb = getDatabase(app);

    const navBtns = document.querySelectorAll(".choose_nav button");
    const lists = document.querySelectorAll(".todo_list");
    const allBoxes = Array.from(
        document.querySelectorAll('input[type="checkbox"]'),
    );
    const battleModal = document.getElementById("battleModal");
    const btnProceed = document.getElementById("modalProceed");

    navBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
            const cat = btn.dataset.cat;
            navBtns.forEach((b) => b.classList.remove("active"));
            btn.classList.add("active");
            lists.forEach((ul) => {
                ul.dataset.cat === cat
                    ? ul.classList.add("active")
                    : ul.classList.remove("active");
            });
        });
    });

    // チェックボックス監視 → 3つ選んだらモーダル表示
    allBoxes.forEach((box) => {
        box.addEventListener("change", () => {
            const count = allBoxes.filter((b) => b.checked).length;
            if (count > 3) {
                box.checked = false;
                alert("選択は３つまでです");
            } else if (count === 3) {
                battleModal.classList.add("visible");
            }
        });
    });

    btnProceed.addEventListener("click", () => {
        battleModal.classList.remove("visible");

        const selected = allBoxes.filter((b) => b.checked).map((b) => b.id);

        set(ref(rdb, `rooms/${roomParam}/selections/${meId}`), selected).catch(
            (err) => {
                console.error("書き込みに失敗しました:", err);
                alert("通信エラーが発生しました");
            },
        );

        onValue(ref(rdb, `rooms/${roomParam}/selections`), (snap) => {
            const data = snap.val() || {};
            const players = Object.keys(data);
            if (
                players.length >= 2 &&
                players.every(
                    (id) => Array.isArray(data[id]) && data[id].length === 3,
                )
            ) {
                location.href = `/duel/${encodeURIComponent(roomParam)}/battle`;
            }
        });
    });

    battleModal.addEventListener("click", (e) => {
        if (e.target === battleModal) {
            battleModal.classList.remove("visible");
        }
    });
</script>
