---
// @ts-nocheck
import BaseLayout from "../../layouts/BaseLayout.astro";
import { db } from "../../firebase/client.js";
import { doc, getDoc } from "firebase/firestore";
import "../../styles/main.scss";

const opponents = ["H.miyoshi", "K.yamagata", "R.tomozuka", "R.matuoka"];

export function getStaticPaths() {
    return [
        { params: { opponent: "H.miyoshi" } },
        { params: { opponent: "K.yamagata" } },
        { params: { opponent: "R.tomozuka" } },
        { params: { opponent: "R.matuoka" } },
    ];
}

// 運動
const exerciseRef = doc(db, "todoCategories", "exercise");
const exerciseSnap = await getDoc(exerciseRef);
const exerciseItems = exerciseSnap.exists() ? exerciseSnap.data().items : [];

// 掃除
const cleaningRef = doc(db, "todoCategories", "cleaning");
const cleaningSnap = await getDoc(cleaningRef);
const cleaningItems = cleaningSnap.exists() ? cleaningSnap.data().items : [];

// 料理
const cookRef = doc(db, "todoCategories", "cook");
const cookSnap = await getDoc(cookRef);
const cookItems = cookSnap.exists() ? cookSnap.data().items : [];

// 読書
const readRef = doc(db, "todoCategories", "read");
const readSnap = await getDoc(readRef);
const readItems = readSnap.exists() ? readSnap.data().items : [];

// ストレッチ
const stretchRef = doc(db, "todoCategories", "stretch");
const stretchSnap = await getDoc(stretchRef);
const stretchItems = stretchSnap.exists() ? stretchSnap.data().items : [];
---

<style lang="scss">
    @use "../../styles/_mixin.scss" as mixin;

    p {
        color: #fff;
        font-size: 1.4rem;
        margin-top: 40px;
    }
    .choose_nav {
        @include mixin.categry-btn-wrap;
        button {
            @include mixin.categry-btn-a;
        }
    }

    ul {
        li {
            display: flex;
            align-items: center;
            padding-left: 20px;
            color: #fff;
            font-size: 1rem;
            line-height: 3;
            input {
                position: relative;
                appearance: none;
                width: 20px;
                height: 20px;
                border-radius: 50px;
                background: #3a4750;
                &:checked::after {
                    content: "";
                    position: absolute;
                    top: -1px;
                    left: 4px;
                    width: 20px;
                    height: 10px;
                    border-bottom: 3px solid #48b02c;
                    border-left: 3px solid #48b02c;
                    transform: rotate(-45deg);
                }
            }
            label {
                padding-left: 20px;
            }
        }
    }
</style>

<BaseLayout>
    <h1>ToDo内容決め</h1>
    <p>あなたのターン</p>
    <nav class="choose_nav">
        <button data-cat="exercise">運動</button>
        <button data-cat="cleaning">掃除</button>
        <button data-cat="read">読書</button>
        <button data-cat="cook">料理</button>
        <button data-cat="stretch">ストレッチ</button>
    </nav>

    <ul>
        {
            exerciseItems.map((item) => (
                <li key={item.id}>
                    <input type="checkbox" id={`todo-${item.id}`} />
                    <label for={`todo-${item.id}`}>{item.label}</label>
                </li>
            ))
        }
    </ul>
</BaseLayout>

<script type="module">
    document.querySelectorAll("ul li").forEach((li) => {
        li.addEventListener("click", () => {
            li.classList.toggle("checked");
        });
    });
</script>
